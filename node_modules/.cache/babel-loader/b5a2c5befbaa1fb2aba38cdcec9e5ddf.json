{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chase\\\\Desktop\\\\COP4864\\\\problem-09-JayaAnim\\\\problem-a\\\\src\\\\components\\\\TrackList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRACK_QUERY_TEMPLATE = 'https://itunes.apple.com/lookup?id={collectionId}&limit=50&entity=song';\nexport default function TrackList(_ref) {\n  _s();\n\n  let {\n    setAlertMessage\n  } = _ref;\n  //setAlertMessage callback as prop\n  const [trackData, setTrackData] = useState([]); //tracks to show\n\n  const [isQuerying, setIsQuerying] = useState(false); //for spinner\n\n  const [previewAudio, setPreviewAudio] = useState(null); //for playing previews!\n\n  const urlParams = useParams(); //get album from URL\n  //YOUR CODE GOES HERE\n  //for fun: allow for clicking to play preview audio!\n\n  const togglePlayingPreview = previewUrl => {\n    if (!previewAudio) {\n      //nothing playing now\n      const newPreview = new Audio(previewUrl);\n      newPreview.addEventListener('ended', () => setPreviewAudio(null)); //stop on end\n\n      setPreviewAudio(newPreview); //rerender and save\n\n      newPreview.play(); //also start playing\n    } else {\n      previewAudio.pause(); //stop whatever is currently playing\n\n      setPreviewAudio(null); //remove it\n    }\n  }; //sort by track number\n\n\n  trackData.sort((trackA, trackB) => trackA.trackNumber - trackB.trackNumber); //render the track elements\n\n  const trackElemArray = trackData.map(track => {\n    let classList = \"track-record\";\n\n    if (previewAudio && previewAudio.src === track.previewUrl) {\n      classList += \" fa-spin\"; //spin if previewing\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        role: \"button\",\n        className: classList,\n        onClick: () => togglePlayingPreview(track.previewUrl),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"track-name\",\n          children: track.trackName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"track-artist\",\n          children: [\"(\", track.artistName, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center\",\n        children: [\"Track \", track.trackNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, track.trackId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isQuerying && /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n      icon: faSpinner,\n      spin: true,\n      size: \"4x\",\n      \"aria-label\": \"Loading...\",\n      \"aria-hidden\": \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-wrap\",\n      children: trackElemArray\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TrackList, \"qoXC48jocTmfVjnYV0KhtYGtINI=\", false, function () {\n  return [useParams];\n});\n\n_c = TrackList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrackList\");","map":{"version":3,"sources":["C:/Users/chase/Desktop/COP4864/problem-09-JayaAnim/problem-a/src/components/TrackList.js"],"names":["React","useState","useParams","FontAwesomeIcon","faSpinner","TRACK_QUERY_TEMPLATE","TrackList","setAlertMessage","trackData","setTrackData","isQuerying","setIsQuerying","previewAudio","setPreviewAudio","urlParams","togglePlayingPreview","previewUrl","newPreview","Audio","addEventListener","play","pause","sort","trackA","trackB","trackNumber","trackElemArray","map","track","classList","src","trackName","artistName","trackId"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TRACK_QUERY_TEMPLATE = 'https://itunes.apple.com/lookup?id={collectionId}&limit=50&entity=song'\r\n\r\nexport default function TrackList({setAlertMessage}) { //setAlertMessage callback as prop\r\n  const [trackData, setTrackData] = useState([]); //tracks to show\r\n  const [isQuerying, setIsQuerying] = useState(false); //for spinner\r\n  const [previewAudio, setPreviewAudio] = useState(null); //for playing previews!\r\n\r\n  const urlParams = useParams(); //get album from URL\r\n\r\n  //YOUR CODE GOES HERE\r\n\r\n\r\n  //for fun: allow for clicking to play preview audio!\r\n  const togglePlayingPreview = (previewUrl) => {\r\n    if(!previewAudio) { //nothing playing now\r\n      const newPreview = new Audio(previewUrl);\r\n      newPreview.addEventListener('ended', () => setPreviewAudio(null)) //stop on end\r\n      setPreviewAudio(newPreview); //rerender and save\r\n      newPreview.play(); //also start playing\r\n    } else {\r\n      previewAudio.pause(); //stop whatever is currently playing\r\n      setPreviewAudio(null); //remove it\r\n    }\r\n  }\r\n\r\n  //sort by track number\r\n  trackData.sort((trackA, trackB) => trackA.trackNumber - trackB.trackNumber)\r\n\r\n  //render the track elements\r\n  const trackElemArray = trackData.map((track) => {\r\n    let classList = \"track-record\";\r\n    if(previewAudio && previewAudio.src === track.previewUrl){\r\n      classList += \" fa-spin\"; //spin if previewing\r\n    }\r\n\r\n    return (\r\n      <div key={track.trackId}>\r\n        <div role=\"button\" className={classList} onClick={() => togglePlayingPreview(track.previewUrl)}>\r\n          <p className=\"track-name\">{track.trackName}</p>\r\n          <p className=\"track-artist\">({track.artistName})</p>\r\n        </div>\r\n        <p className=\"text-center\">Track {track.trackNumber}</p>\r\n      </div>      \r\n    )\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      {isQuerying && <FontAwesomeIcon icon={faSpinner} spin size=\"4x\" aria-label=\"Loading...\" aria-hidden=\"false\"/>}\r\n      <div className=\"d-flex flex-wrap\">\r\n        {trackElemArray}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}